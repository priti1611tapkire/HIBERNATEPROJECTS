/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2021-01-19 05:54:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class as_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write(" <head>\r\n");
      out.write(" <SCRIPT type=\"text/javascript\" src=\"rightclick.js\"></SCRIPT>\r\n");
      out.write("  <title> New Document </title>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function validateForm()\r\n");
      out.write("{\r\n");
      out.write("\tvar x=document.forms[\"login\"][\"logid\"].value\r\n");
      out.write("\tif (x==null || x==\"\")\r\n");
      out.write(" \t {\r\n");
      out.write(" \t\t alert(\"LOGIN ID must be filled out\");\r\n");
      out.write(" \t\t \r\n");
      out.write(" \t\t return false;\r\n");
      out.write("  \t}\r\n");
      out.write("  \tx=document.forms[\"login\"][\"pass\"].value\r\n");
      out.write("  \tif (x==null || x==\"\")\r\n");
      out.write(" \t {\r\n");
      out.write(" \t\t alert(\"PASSWORD must be filled out\");\r\n");
      out.write(" \t\t return false;\r\n");
      out.write("  \t}\r\n");
      out.write("  \treturn true;\r\n");
      out.write("}\r\n");
      out.write("function validateUser()\r\n");
      out.write("{\r\n");
      out.write("\tvar x=document.forms[\"login\"][\"logid\"].value\r\n");
      out.write("\tif (x==null || x==\"\")\r\n");
      out.write(" \t {\r\n");
      out.write(" \t\t alert(\"LOGIN ID must be filled out\");\r\n");
      out.write(" \t\t \r\n");
      out.write(" \t\t return false;\r\n");
      out.write("  \t}\r\n");
      out.write("  \t\r\n");
      out.write("  \treturn true;\r\n");
      out.write("}\r\n");
      out.write("</script>  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <SCRIPT type=\"text/javascript\" src=\"vkboard.js\"></SCRIPT>\r\n");
      out.write("  <SCRIPT>\r\n");
      out.write("\r\n");
      out.write("   // This example shows the very basic installation\r\n");
      out.write("   // of the Virtual Keyboard.\r\n");
      out.write("   // \r\n");
      out.write("   // 'keyb_change' and 'keyb_callback' functions\r\n");
      out.write("   // do all the job here.\r\n");
      out.write("\r\n");
      out.write("   var opened = false, vkb = null, text = null;\r\n");
      out.write("\r\n");
      out.write("   function keyb_change()\r\n");
      out.write("   {\r\n");
      out.write("     document.getElementById(\"switch\").innerHTML = (opened ? \"Show keyboard\" : \"Hide keyboard\");\r\n");
      out.write("     opened = !opened;\r\n");
      out.write("\r\n");
      out.write("     if(opened && !vkb)\r\n");
      out.write("     {\r\n");
      out.write("       // Note: all parameters, starting with 3rd, in the following\r\n");
      out.write("       // expression are equal to the default parameters for the\r\n");
      out.write("       // VKeyboard object. The only exception is 15th parameter\r\n");
      out.write("       // (flash switch), which is false by default.\r\n");
      out.write("\r\n");
      out.write("       vkb = new VKeyboard(\"keyboard\",    // container's id\r\n");
      out.write("                           keyb_callback, // reference to the callback function\r\n");
      out.write("                           true,          // create the arrow keys or not? (this and the following params are optional)\r\n");
      out.write("                           true,          // create up and down arrow keys? \r\n");
      out.write("                           false,         // reserved\r\n");
      out.write("                           true,          // create the numpad or not?\r\n");
      out.write("                           \"\",            // font name (\"\" == system default)\r\n");
      out.write("                           \"14px\",        // font size in px\r\n");
      out.write("                           \"#000\",        // font color\r\n");
      out.write("                           \"#F00\",        // font color for the dead keys\r\n");
      out.write("                           \"#FFF\",        // keyboard base background color\r\n");
      out.write("                           \"#FFF\",        // keys' background color\r\n");
      out.write("                           \"#DDD\",        // background color of switched/selected item\r\n");
      out.write("                           \"#777\",        // border color\r\n");
      out.write("                           \"#CCC\",        // border/font color of \"inactive\" key (key with no value/disabled)\r\n");
      out.write("                           \"#FFF\",        // background color of \"inactive\" key (key with no value/disabled)\r\n");
      out.write("                           \"#F77\",        // border color of the language selector's cell\r\n");
      out.write("                           true,          // show key flash on click? (false by default)\r\n");
      out.write("                           \"#CC3300\",     // font color during flash\r\n");
      out.write("                           \"#FF9966\",     // key background color during flash\r\n");
      out.write("                           \"#CC3300\",     // key border color during flash\r\n");
      out.write("                           false,         // embed VKeyboard into the page?\r\n");
      out.write("                           true,          // use 1-pixel gap between the keys?\r\n");
      out.write("                           0);            // index(0-based) of the initial layout\r\n");
      out.write("     }\r\n");
      out.write("     else\r\n");
      out.write("       vkb.Show(opened);\r\n");
      out.write("\r\n");
      out.write("     text = document.getElementById(\"textfield\");\r\n");
      out.write("     text.focus();\r\n");
      out.write("\r\n");
      out.write("     if(document.attachEvent)\r\n");
      out.write("       text.attachEvent(\"onblur\", backFocus);\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function backFocus()\r\n");
      out.write("   {\r\n");
      out.write("     if(opened)\r\n");
      out.write("     {\r\n");
      out.write("       var l = text.value.length;\r\n");
      out.write("\r\n");
      out.write("       setRange(text, l, l);\r\n");
      out.write("\r\n");
      out.write("       text.focus();\r\n");
      out.write("     }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // Callback function:\r\n");
      out.write("   function keyb_callback(ch)\r\n");
      out.write("   {\r\n");
      out.write("     var val = text.value;\r\n");
      out.write("\r\n");
      out.write("     switch(ch)\r\n");
      out.write("     {\r\n");
      out.write("       case \"BackSpace\":\r\n");
      out.write("         var min = (val.charCodeAt(val.length - 1) == 10) ? 2 : 1;\r\n");
      out.write("         text.value = val.substr(0, val.length - min);\r\n");
      out.write("         break;\r\n");
      out.write("\r\n");
      out.write("       case \"Enter\":\r\n");
      out.write("         text.value += \"\\n\";\r\n");
      out.write("         break;\r\n");
      out.write("\r\n");
      out.write("       default:\r\n");
      out.write("         text.value += ch;\r\n");
      out.write("     }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function setRange(ctrl, start, end)\r\n");
      out.write("   {\r\n");
      out.write("     if(ctrl.setSelectionRange) // Standard way (Mozilla, Opera, ...)\r\n");
      out.write("     {\r\n");
      out.write("       ctrl.setSelectionRange(start, end);\r\n");
      out.write("     }\r\n");
      out.write("     else // MS IE\r\n");
      out.write("     {\r\n");
      out.write("       var range;\r\n");
      out.write("\r\n");
      out.write("       try\r\n");
      out.write("       {\r\n");
      out.write("         range = ctrl.createTextRange();\r\n");
      out.write("       }\r\n");
      out.write("       catch(e)\r\n");
      out.write("       {\r\n");
      out.write("         try\r\n");
      out.write("         {\r\n");
      out.write("           range = document.body.createTextRange();\r\n");
      out.write("           range.moveToElementText(ctrl);\r\n");
      out.write("         }\r\n");
      out.write("         catch(e)\r\n");
      out.write("         {\r\n");
      out.write("           range = null;\r\n");
      out.write("         }\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       if(!range) return;\r\n");
      out.write("\r\n");
      out.write("       range.collapse(true);\r\n");
      out.write("       range.moveStart(\"character\", start);\r\n");
      out.write("       range.moveEnd(\"character\", end - start);\r\n");
      out.write("       range.select();\r\n");
      out.write("     }\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("</SCRIPT>\r\n");
      out.write(" </head>\r\n");
      out.write(" <body  background=\"1.jpg\">\r\n");
      out.write(" <MARQUEE>\r\n");
      out.write(" <span style=\"color:green\"><i><H1>LOGIN PAGE OF BANK OF RR</H1></i></span>\r\n");
      out.write("\r\n");
      out.write("</MARQUEE>\r\n");
      out.write(" \r\n");
      out.write("<center>\r\n");
      out.write("  <form method=\"post\" action=\"Controller\" name=\"login\" onsubmit=\"return validateForm()\" >\r\n");
      out.write("  \r\n");
      out.write("  <br>  <br>  <br>  <br>  <br>  <br>  \r\n");
      out.write("  <br> \r\n");
      out.write(" \r\n");
      out.write("  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n");
      out.write("  \t\t\t\t<tr><td ><h1>LOG-ON DETAILS</h1></td></tr>\r\n");
      out.write("  \t\t\t\t\t<tr><table  border=\"1\">\r\n");
      out.write("\t\t\t\t\t <tr style=\"height:50px\">\r\n");
      out.write("                          <td  ><strong>LOGIN ID* </strong></td>\r\n");
      out.write("                          <td ><input name=logid  type=\"text\" id=\"username\" value=\"\" tabindex=\"1\" size=\"20\" maxlength=\"20\" ></td>\r\n");
      out.write("                     </tr>\r\n");
      out.write("                        <tr style=\"height:50px\">\r\n");
      out.write("                          <td><strong>PASSWORD* </strong></td>\r\n");
      out.write("                          <td ><input type=password id=\"textfield\" name=pass tabindex=\"2\" title=\"password\" size=\"20\"></td> \r\n");
      out.write("                        </tr>\r\n");
      out.write("                        \r\n");
      out.write("\t\t\t\t\t</table></tr>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t");
if((String)request.getAttribute("wrong")!=null) 
                        {
                        
      out.write("\r\n");
      out.write("                        <script type=\"text/javascript\">alert(\"LOGIN ID OR PASSWORD IS WRONG\")</script>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  </table>\r\n");
      out.write("\t<A href=\"javascript:keyb_change()\" onclick=\"javascript:blur()\" id=\"switch\" style=\"font-family:Tahoma;font-size:14px;text-decoration:none;border-bottom: 1px dashed #0000F0;color:#0000F0\">Show keyboard</A>\r\n");
      out.write("\t<DIV id=\"keyboard\"></DIV>\r\n");
      out.write("\t<input type=submit name=\"action\" value=LOGIN >\r\n");
      out.write("\t<input type=reset name=RESET ><br>\r\n");
      out.write("\t<a href=\"Controller?action=forget\" onClick=\"return validateUser()\">FORGOT PASSWORD</a>\r\n");
      out.write("  </form>\r\n");
      out.write("   </center>\r\n");
      out.write(" </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
